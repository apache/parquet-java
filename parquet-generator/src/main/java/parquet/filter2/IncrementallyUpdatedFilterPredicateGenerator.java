package parquet.filter2;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class IncrementallyUpdatedFilterPredicateGenerator {

  public static void main(String[] args) throws IOException {
    File srcFile = new File(args[0] + "/parquet/filter2/recordlevel/IncrementallyUpdatedFilterPredicateBuilder.java");
    srcFile = srcFile.getAbsoluteFile();
    File parent = srcFile.getParentFile();
    if (!parent.exists()) {
      if (!parent.mkdirs()) {
        throw new IOException("Couldn't mkdirs for " + parent);
      }
    }
    new IncrementallyUpdatedFilterPredicateGenerator(srcFile).run();
  }

  private final FileWriter writer;

  public IncrementallyUpdatedFilterPredicateGenerator(File file) throws IOException {
    this.writer = new FileWriter(file);
  }

  private static class TypeInfo {
    public final String className;
    public final String primitiveName;
    public final boolean useComparable;
    public final boolean supportsInequality;

    private TypeInfo(String className, String primitiveName, boolean useComparable, boolean supportsInequality) {
      this.className = className;
      this.primitiveName = primitiveName;
      this.useComparable = useComparable;
      this.supportsInequality = supportsInequality;
    }
  }

  private static final TypeInfo[] TYPES = new TypeInfo[]{
    new TypeInfo("Integer", "int", false, true),
    new TypeInfo("Long", "long", false, true),
    new TypeInfo("Boolean", "boolean", false, false),
    new TypeInfo("Float", "float", false, true),
    new TypeInfo("Double", "double", false, true),
    new TypeInfo("Binary", "Binary", true, true),
  };

  public void run() throws IOException {
    add("package parquet.filter2.recordlevel;\n" +
        "\n" +
        "import java.util.ArrayList;\n" +
        "import java.util.HashMap;\n" +
        "import java.util.List;\n" +
        "import java.util.Map;\n" +
        "\n" +
        "import parquet.ColumnPath;\n" +
        "import parquet.Preconditions;\n" +
        "import parquet.filter2.predicate.FilterPredicate;\n" +
        "import parquet.filter2.predicate.FilterPredicate.Visitor;\n" +
        "import parquet.filter2.predicate.Operators.And;\n" +
        "import parquet.filter2.predicate.Operators.Eq;\n" +
        "import parquet.filter2.predicate.Operators.Gt;\n" +
        "import parquet.filter2.predicate.Operators.GtEq;\n" +
        "import parquet.filter2.predicate.Operators.LogicalNotUserDefined;\n" +
        "import parquet.filter2.predicate.Operators.Lt;\n" +
        "import parquet.filter2.predicate.Operators.LtEq;\n" +
        "import parquet.filter2.predicate.Operators.Not;\n" +
        "import parquet.filter2.predicate.Operators.NotEq;\n" +
        "import parquet.filter2.predicate.Operators.Or;\n" +
        "import parquet.filter2.predicate.Operators.UserDefined;\n" +
        "import parquet.filter2.predicate.UserDefinedPredicate;\n" +
        "import parquet.filter2.recordlevel.IncrementallyUpdatedFilterPredicate.ValueInspector;\n" +
        "import parquet.io.api.Binary;\n" +
        "\n" +
        "/**\n" +
        " * This class is auto-generated by parquet.filter2.IncrementallyUpdatedFilterPredicateGenerator\n" +
        " * Do not manually edit!\n" +
        " *\n" +
        " * Constructs a {@link IncrementallyUpdatedFilterPredicate} from a {@link parquet.filter2.predicate.FilterPredicate}\n" +
        " * This is how records are filtered during record assembly. This file is generated in order to avoid autoboxing.\n" +
        " *\n" +
        " * Note: the supplied predicate must not contain any instances of the not() operator as this is not\n" +
        " * supported by this filter.\n" +
        " *\n" +
        " * the supplied predicate should first be run through {@link parquet.filter2.predicate.LogicalInverseRewriter} to rewrite it\n" +
        " * in a form that doesn't make use of the not() operator.\n" +
        " *\n" +
        " * the supplied predicate should also have already been run through\n" +
        " * {@link parquet.filter2.predicate.SchemaCompatibilityValidator}\n" +
        " * to make sure it is compatible with the schema of this file.\n" +
        " * TODO(alexlevenson): user defined functions still autobox however\n" +
        " */\n");

    add("public class IncrementallyUpdatedFilterPredicateBuilder implements Visitor<IncrementallyUpdatedFilterPredicate> {\n" +
        "  private boolean built = false;\n" +
        "  private final Map<ColumnPath, List<ValueInspector>> valueInspectorsByColumn = new HashMap<ColumnPath, List<ValueInspector>>();\n" +
        "\n" +
        "  public IncrementallyUpdatedFilterPredicateBuilder() { }\n" +
        "\n" +
        "  public IncrementallyUpdatedFilterPredicate build(FilterPredicate pred) {\n" +
        "    Preconditions.checkArgument(!built, \"This builder has already been used\");\n" +
        "    IncrementallyUpdatedFilterPredicate incremental = pred.accept(this);\n" +
        "    built = true;\n" +
        "    return incremental;\n" +
        "  }\n" +
        "  private void addValueInspector(ColumnPath columnPath, ValueInspector valueInspector) {\n" +
        "    List<ValueInspector> valueInspectors = valueInspectorsByColumn.get(columnPath);\n" +
        "    if (valueInspectors == null) {\n" +
        "      valueInspectors = new ArrayList<ValueInspector>();\n" +
        "      valueInspectorsByColumn.put(columnPath, valueInspectors);\n" +
        "    }\n" +
        "    valueInspectors.add(valueInspector);\n" +
        "  }\n" +
        "\n" +
        "  public Map<ColumnPath, List<ValueInspector>> getValueInspectorsByColumn() {\n" +
        "    return valueInspectorsByColumn;\n" +
        "  }\n" +
        "\n");

    addVisitBegin("Eq");
    for (TypeInfo info : TYPES) {
      addEqNotEqCase(info, true);
    }
    addVisitEnd();

    addVisitBegin("NotEq");
    for (TypeInfo info : TYPES) {
      addEqNotEqCase(info, false);
    }
    addVisitEnd();

    addVisitBegin("Lt");
    for (TypeInfo info : TYPES) {
      addInequalityCase(info, "<");
    }
    addVisitEnd();

    addVisitBegin("LtEq");
    for (TypeInfo info : TYPES) {
      addInequalityCase(info, "<=");
    }
    addVisitEnd();

    addVisitBegin("Gt");
    for (TypeInfo info : TYPES) {
      addInequalityCase(info, ">");
    }
    addVisitEnd();

    addVisitBegin("GtEq");
    for (TypeInfo info : TYPES) {
      addInequalityCase(info, ">=");
    }
    addVisitEnd();

    add("  @Override\n" +
        "  public IncrementallyUpdatedFilterPredicate visit(And and) {\n" +
        "    return new IncrementallyUpdatedFilterPredicate.And(and.getLeft().accept(this), and.getRight().accept(this));\n" +
        "  }\n" +
        "\n" +
        "  @Override\n" +
        "  public IncrementallyUpdatedFilterPredicate visit(Or or) {\n" +
        "    return new IncrementallyUpdatedFilterPredicate.Or(or.getLeft().accept(this), or.getRight().accept(this));\n" +
        "  }\n" +
        "\n" +
        "  @Override\n" +
        "  public IncrementallyUpdatedFilterPredicate visit(Not not) {\n" +
        "    throw new IllegalArgumentException(\n" +
        "        \"This predicate contains a not! Did you forget to run this predicate through LogicalInverseRewriter? \" + not);\n" +
        "  }\n\n");

    add("  @Override\n" +
        "  public <T extends Comparable<T>, U extends UserDefinedPredicate<T>> IncrementallyUpdatedFilterPredicate visit(UserDefined<T, U> pred) {\n");
    addUdpBegin();
    for (TypeInfo info : TYPES) {
      addUdpCase(info, false);
    }
    addVisitEnd();

    add("  @Override\n" +
        "  public <T extends Comparable<T>, U extends UserDefinedPredicate<T>> IncrementallyUpdatedFilterPredicate visit(LogicalNotUserDefined<T, U> notPred) {\n" +
        "    UserDefined<T, U> pred = notPred.getUserDefined();\n");
    addUdpBegin();
    for (TypeInfo info : TYPES) {
      addUdpCase(info, true);
    }
    addVisitEnd();

    add("}\n");
    writer.close();
  }

  private void addVisitBegin(String inVar) throws IOException {
    add("  @Override\n" +
        "  public <T extends Comparable<T>> IncrementallyUpdatedFilterPredicate visit(" + inVar + "<T> pred) {\n" +
        "    ColumnPath columnPath = pred.getColumn().getColumnPath();\n" +
        "    Class<T> clazz = pred.getColumn().getColumnType();\n" +
        "\n" +
        "    ValueInspector valueInspector = null;\n\n");
  }

  private void addVisitEnd() throws IOException {
    add("    if (valueInspector == null) {\n" +
        "      throw new IllegalArgumentException(\"Encountered unknown type \" + clazz);\n" +
        "    }\n" +
        "\n" +
        "    addValueInspector(columnPath, valueInspector);\n" +
        "    return valueInspector;\n" +
        "  }\n\n");
  }

  private void addEqNotEqCase(TypeInfo info, boolean isEq) throws IOException {
    add("    if (clazz.equals(" + info.className + ".class)) {\n" +
        "      if (pred.getValue() == null) {\n" +
        "        valueInspector = new ValueInspector() {\n" +
        "          @Override\n" +
        "          public void updateNull() {\n" +
        "            setResult(" + isEq + ");\n" +
        "          }\n" +
        "\n" +
        "          @Override\n" +
        "          public void update(" + info.primitiveName + " value) {\n" +
        "            setResult(" + !isEq + ");\n" +
        "          }\n" +
        "        };\n" +
        "      } else {\n" +
        "        final " + info.primitiveName + " target = (" + info.className + ") (Object) pred.getValue();\n" +
        "\n" +
        "        valueInspector = new ValueInspector() {\n" +
        "          @Override\n" +
        "          public void updateNull() {\n" +
        "            setResult(" + !isEq +");\n" +
        "          }\n" +
        "\n" +
        "          @Override\n" +
        "          public void update(" + info.primitiveName + " value) {\n");

    if (info.useComparable) {
      add("            setResult(" + compareEquality("value", "target", isEq) + ");\n");
    } else {
      add("            setResult(" + (isEq ? "value == target" : "value != target" )  + ");\n");
    }

    add("          }\n" +
        "        };\n" +
        "      }\n" +
        "    }\n\n");
  }

  private void addInequalityCase(TypeInfo info, String op) throws IOException {
    if (!info.supportsInequality) {
      add("    if (clazz.equals(" + info.className + ".class)) {\n");
      add("      throw new IllegalArgumentException(\"Operator " + op + " not supported for " + info.className + "\");\n");
      add("    }\n\n");
      return;
    }

    add("    if (clazz.equals(" + info.className + ".class)) {\n" +
        "      final " + info.primitiveName + " target = (" + info.className + ") (Object) pred.getValue();\n" +
        "\n" +
        "      valueInspector = new ValueInspector() {\n" +
        "        @Override\n" +
        "        public void updateNull() {\n" +
        "          setResult(false);\n" +
        "        }\n" +
        "\n" +
        "        @Override\n" +
        "        public void update(" + info.primitiveName + " value) {\n");

    if (info.useComparable) {
      add("          setResult(value.compareTo(target) " + op + " 0);\n");
    } else {
      add("          setResult(value " + op + " target);\n");
    }
    add("        }\n" +
        "      };\n" +
        "    }\n\n");
  }

  private void addUdpBegin() throws IOException {
    add("    ColumnPath columnPath = pred.getColumn().getColumnPath();\n" +
        "    Class<T> clazz = pred.getColumn().getColumnType();\n" +
        "\n" +
        "    ValueInspector valueInspector = null;\n" +
        "\n" +
        "    final U udp = pred.getUserDefinedPredicate();\n" +
        "\n");
  }

  private void addUdpCase(TypeInfo info, boolean invert)throws IOException {
    add("    if (clazz.equals(" + info.className + ".class)) {\n" +
        "      valueInspector = new ValueInspector() {\n" +
        "        @Override\n" +
        "        public void updateNull() {\n" +
        "          setResult(" + (invert ? "!" : "") + "udp.keep(null));\n" +
        "        }\n" +
        "\n" +
        "        @SuppressWarnings(\"unchecked\")\n" +
        "        @Override\n" +
        "        public void update(" + info.primitiveName + " value) {\n" +
        "          setResult(" + (invert ? "!" : "") + "udp.keep((T) (Object) value));\n" +
        "        }\n" +
        "      };\n" +
        "    }\n\n");
  }

  private String compareEquality(String var, String target, boolean eq) {
    return var + ".compareTo(" + target + ")" + (eq ? " == 0 " : " != 0");
  }

  private void add(String s) throws IOException {
    writer.write(s);
  }
}
